
KeypadTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000001e8  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a69  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082f  00000000  00000000  00000d71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c9  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000196c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000424  00000000  00000000  000019b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000277  00000000  00000000  00001dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000204b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ee       	ldi	r30, 0xE8	; 232
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	75 d0       	rcall	.+234    	; 0x19e <main>
  b4:	97 c0       	rjmp	.+302    	; 0x1e4 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <KeyScan>:
//4 = r1
//5 = r2
//6 = r3
int KeyScan(void)
{
	PORTA = 0x08;
  b8:	88 e0       	ldi	r24, 0x08	; 8
  ba:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	83 e3       	ldi	r24, 0x33	; 51
  be:	97 e0       	ldi	r25, 0x07	; 7
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <KeyScan+0x8>
	_delay_ms(1);
	if(PINA&0x01) return 1;
  c4:	c8 99       	sbic	0x19, 0	; 25
  c6:	47 c0       	rjmp	.+142    	; 0x156 <KeyScan+0x9e>
	if(PINA&0x02) return 2;
  c8:	c9 99       	sbic	0x19, 1	; 25
  ca:	48 c0       	rjmp	.+144    	; 0x15c <KeyScan+0xa4>
	if(PINA&0x04) return 3;
  cc:	ca 99       	sbic	0x19, 2	; 25
  ce:	49 c0       	rjmp	.+146    	; 0x162 <KeyScan+0xaa>
	PORTA = 0x00;
  d0:	1b ba       	out	0x1b, r1	; 27
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	97 e4       	ldi	r25, 0x47	; 71
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <KeyScan+0x1e>
  da:	00 c0       	rjmp	.+0      	; 0xdc <KeyScan+0x24>
  dc:	00 00       	nop
	_delay_ms(10);
	
	PORTA = 0x10;
  de:	80 e1       	ldi	r24, 0x10	; 16
  e0:	8b bb       	out	0x1b, r24	; 27
  e2:	83 e3       	ldi	r24, 0x33	; 51
  e4:	97 e0       	ldi	r25, 0x07	; 7
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <KeyScan+0x2e>
	_delay_ms(1);
	if(PINA&0x01) return 4;
  ea:	c8 99       	sbic	0x19, 0	; 25
  ec:	3d c0       	rjmp	.+122    	; 0x168 <KeyScan+0xb0>
	if(PINA&0x02) return 5;
  ee:	c9 99       	sbic	0x19, 1	; 25
  f0:	3e c0       	rjmp	.+124    	; 0x16e <KeyScan+0xb6>
	if(PINA&0x04) return 6;
  f2:	ca 99       	sbic	0x19, 2	; 25
  f4:	3f c0       	rjmp	.+126    	; 0x174 <KeyScan+0xbc>
	PORTA = 0x00;
  f6:	1b ba       	out	0x1b, r1	; 27
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	97 e4       	ldi	r25, 0x47	; 71
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <KeyScan+0x44>
 100:	00 c0       	rjmp	.+0      	; 0x102 <KeyScan+0x4a>
 102:	00 00       	nop
	_delay_ms(10);
	
	PORTA = 0x20;
 104:	80 e2       	ldi	r24, 0x20	; 32
 106:	8b bb       	out	0x1b, r24	; 27
 108:	83 e3       	ldi	r24, 0x33	; 51
 10a:	97 e0       	ldi	r25, 0x07	; 7
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <KeyScan+0x54>
	_delay_ms(1);
	if(PINA&0x01) return 7;
 110:	c8 99       	sbic	0x19, 0	; 25
 112:	33 c0       	rjmp	.+102    	; 0x17a <KeyScan+0xc2>
	if(PINA&0x02) return 8;
 114:	c9 99       	sbic	0x19, 1	; 25
 116:	34 c0       	rjmp	.+104    	; 0x180 <KeyScan+0xc8>
	if(PINA&0x04) return 9;
 118:	ca 99       	sbic	0x19, 2	; 25
 11a:	35 c0       	rjmp	.+106    	; 0x186 <KeyScan+0xce>
	PORTA = 0x00;
 11c:	1b ba       	out	0x1b, r1	; 27
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	97 e4       	ldi	r25, 0x47	; 71
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <KeyScan+0x6a>
 126:	00 c0       	rjmp	.+0      	; 0x128 <KeyScan+0x70>
 128:	00 00       	nop
	_delay_ms(10);
	
	PORTA = 0x40;
 12a:	80 e4       	ldi	r24, 0x40	; 64
 12c:	8b bb       	out	0x1b, r24	; 27
 12e:	83 e3       	ldi	r24, 0x33	; 51
 130:	97 e0       	ldi	r25, 0x07	; 7
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <KeyScan+0x7a>
	_delay_ms(1);
	if(PINA&0x01) return 0;
 136:	c8 99       	sbic	0x19, 0	; 25
 138:	29 c0       	rjmp	.+82     	; 0x18c <KeyScan+0xd4>
	if(PINA&0x02) return 0;
 13a:	c9 99       	sbic	0x19, 1	; 25
 13c:	2a c0       	rjmp	.+84     	; 0x192 <KeyScan+0xda>
	if(PINA&0x04) return 0;
 13e:	ca 99       	sbic	0x19, 2	; 25
 140:	2b c0       	rjmp	.+86     	; 0x198 <KeyScan+0xe0>
	PORTA = 0x00;
 142:	1b ba       	out	0x1b, r1	; 27
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	97 e4       	ldi	r25, 0x47	; 71
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <KeyScan+0x90>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <KeyScan+0x96>
 14e:	00 00       	nop
	_delay_ms(10);
	
	return 0;
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	08 95       	ret
//6 = r3
int KeyScan(void)
{
	PORTA = 0x08;
	_delay_ms(1);
	if(PINA&0x01) return 1;
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	08 95       	ret
	if(PINA&0x02) return 2;
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	08 95       	ret
	if(PINA&0x04) return 3;
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	08 95       	ret
	PORTA = 0x00;
	_delay_ms(10);
	
	PORTA = 0x10;
	_delay_ms(1);
	if(PINA&0x01) return 4;
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	08 95       	ret
	if(PINA&0x02) return 5;
 16e:	85 e0       	ldi	r24, 0x05	; 5
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	08 95       	ret
	if(PINA&0x04) return 6;
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	08 95       	ret
	PORTA = 0x00;
	_delay_ms(10);
	
	PORTA = 0x20;
	_delay_ms(1);
	if(PINA&0x01) return 7;
 17a:	87 e0       	ldi	r24, 0x07	; 7
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	08 95       	ret
	if(PINA&0x02) return 8;
 180:	88 e0       	ldi	r24, 0x08	; 8
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	08 95       	ret
	if(PINA&0x04) return 9;
 186:	89 e0       	ldi	r24, 0x09	; 9
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	08 95       	ret
	PORTA = 0x00;
	_delay_ms(10);
	
	PORTA = 0x40;
	_delay_ms(1);
	if(PINA&0x01) return 0;
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	08 95       	ret
	if(PINA&0x02) return 0;
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	08 95       	ret
	if(PINA&0x04) return 0;
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
	PORTA = 0x00;
	_delay_ms(10);
	
	return 0;
}
 19c:	08 95       	ret

0000019e <main>:

int main(void)
{
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	64 97       	sbiw	r28, 0x14	; 20
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	f8 94       	cli
 1ac:	de bf       	out	0x3e, r29	; 62
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	cd bf       	out	0x3d, r28	; 61
	int Num[10] ={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
 1b2:	84 e1       	ldi	r24, 0x14	; 20
 1b4:	e0 e0       	ldi	r30, 0x00	; 0
 1b6:	f1 e0       	ldi	r31, 0x01	; 1
 1b8:	de 01       	movw	r26, r28
 1ba:	11 96       	adiw	r26, 0x01	; 1
 1bc:	01 90       	ld	r0, Z+
 1be:	0d 92       	st	X+, r0
 1c0:	8a 95       	dec	r24
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x1e>
	DDRA = 0xF8;
 1c4:	88 ef       	ldi	r24, 0xF8	; 248
 1c6:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0xFF;
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	81 bb       	out	0x11, r24	; 17
	
	while(1){
		PORTD = Num[KeyScan()];
 1cc:	75 df       	rcall	.-278    	; 0xb8 <KeyScan>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	e1 e0       	ldi	r30, 0x01	; 1
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	ec 0f       	add	r30, r28
 1d8:	fd 1f       	adc	r31, r29
 1da:	e8 0f       	add	r30, r24
 1dc:	f9 1f       	adc	r31, r25
 1de:	80 81       	ld	r24, Z
 1e0:	82 bb       	out	0x12, r24	; 18
 1e2:	f4 cf       	rjmp	.-24     	; 0x1cc <main+0x2e>

000001e4 <_exit>:
 1e4:	f8 94       	cli

000001e6 <__stop_program>:
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <__stop_program>
